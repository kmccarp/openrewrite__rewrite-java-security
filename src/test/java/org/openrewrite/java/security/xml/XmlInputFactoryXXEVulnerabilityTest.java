/*
 * Copyright 2023 the original author or authors.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * https://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.openrewrite.java.security.xml;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import org.openrewrite.DocumentExample;
import org.openrewrite.java.security.XmlParserXXEVulnerability;
import org.openrewrite.test.RecipeSpec;
import org.openrewrite.test.RewriteTest;

import static org.openrewrite.java.Assertions.java;
import static org.openrewrite.xml.Assertions.xml;

class XmlInputFactoryXXEVulnerabilityTest implements RewriteTest {
    @Override
    public void defaults(RecipeSpec spec) {
        spec.recipe(new XmlParserXXEVulnerability());
    }

    @Test
    void factoryIsNotVulnerable() {
        //language=java
        rewriteRun(
          java(
            """
              import javax.xml.stream.XMLInputFactory;
              import javax.xml.stream.XMLStreamReader;
              import java.io.InputStream;
              public class MyXmlReader {
                  public void parseXML(InputStream input) {
                      XMLInputFactory factory = XMLInputFactory.newInstance();
                      factory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
                      factory.setProperty(XMLInputFactory.SUPPORT_DTD, false);
                      XMLStreamReader reader = factory.createXMLStreamReader(input);
                  }
              }
              """
          )
        );
    }

    @Test
    void factoryIsNotVulnerableClassBlockInitialization() {
        //language=java
        rewriteRun(
          java(
            """
              import javax.xml.stream.XMLInputFactory;
              import javax.xml.stream.XMLStreamReader;
              import java.io.InputStream;
              public class MyXmlReader {
                  XMLInputFactory factory = XMLInputFactory.newInstance();
                  {
                      factory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
                      factory.setProperty(XMLInputFactory.SUPPORT_DTD, false);
                  }
                  public void parseXML(InputStream input) {
                      XMLStreamReader reader = factory.createXMLStreamReader(input);
                  }
              }
              """
          )
        );
    }

    @DocumentExample
    @Test
    void factoryIsVulnerableWithMethodInitialization() {
        //language=java
        rewriteRun(
          java(
            """
              import javax.xml.stream.XMLInputFactory;
              import javax.xml.stream.XMLStreamReader;
              import java.io.InputStream;
              public class MyXmlReader {
                  public void parseXML(InputStream input) {
                      XMLInputFactory f = XMLInputFactory.newInstance();
                      XMLStreamReader reader = f.createXMLStreamReader(input);
                  }
              }
              """,
            """
              import javax.xml.stream.XMLInputFactory;
              import javax.xml.stream.XMLStreamReader;
              import java.io.InputStream;
              public class MyXmlReader {
                  public void parseXML(InputStream input) {
                      XMLInputFactory f = XMLInputFactory.newInstance();
                      f.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
                      f.setProperty(XMLInputFactory.SUPPORT_DTD, false);
                      XMLStreamReader reader = f.createXMLStreamReader(input);
                  }
              }
              """
          )
        );
    }

    @Test
    void factoryConstructorInitialization() {
        //language=java
        rewriteRun(
          java(
            """
              import javax.xml.stream.XMLInputFactory;
              public class MyXmlReader {
                  private XMLInputFactory f;
                  public MyXmlReader() {
                      f = XMLInputFactory.newInstance();
                      f.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
                  }
              }
              """,
            """
              import javax.xml.stream.XMLInputFactory;
              public class MyXmlReader {
                  private XMLInputFactory f;
                  public MyXmlReader() {
                      f = XMLInputFactory.newInstance();
                      f.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
                      f.setProperty(XMLInputFactory.SUPPORT_DTD, false);
                  }
              }
              """
          )
        );
    }

    @Test
    void factoryIsVulnerableWithClassBlockInitialization() {
        //language=java
        rewriteRun(
          java(
            """
              import javax.xml.stream.XMLInputFactory;
              import javax.xml.stream.XMLStreamReader;
              import java.io.InputStream;
              public class MyXmlReader {
                  XMLInputFactory factory = XMLInputFactory.newInstance();
                  public void parseXML(InputStream input) {
                      XMLStreamReader reader = factory.createXMLStreamReader(input);
                  }
              }
              """,
            """
              import javax.xml.stream.XMLInputFactory;
              import javax.xml.stream.XMLStreamReader;
              import java.io.InputStream;
              public class MyXmlReader {
                  XMLInputFactory factory = XMLInputFactory.newInstance();

                  {
                      factory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
                      factory.setProperty(XMLInputFactory.SUPPORT_DTD, false);
                  }
                  public void parseXML(InputStream input) {
                      XMLStreamReader reader = factory.createXMLStreamReader(input);
                  }
              }
              """
          )
        );
    }

    @Test
    void factoryNeedsDtdWithClassBlockInitialization() {
        //language=java
        rewriteRun(
          java(
            """
              import javax.xml.stream.XMLInputFactory;
              import javax.xml.stream.XMLStreamReader;
              import java.io.InputStream;
              public class MyXmlReader {
                  XMLInputFactory factory = XMLInputFactory.newInstance();

                  {
                      factory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
                  }
                  public void parseXML(InputStream input) {
                      XMLStreamReader reader = factory.createXMLStreamReader(input);
                  }
              }
              """,
            """
              import javax.xml.stream.XMLInputFactory;
              import javax.xml.stream.XMLStreamReader;
              import java.io.InputStream;
              public class MyXmlReader {
                  XMLInputFactory factory = XMLInputFactory.newInstance();

                  {
                      factory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
                      factory.setProperty(XMLInputFactory.SUPPORT_DTD, false);
                  }
                  public void parseXML(InputStream input) {
                      XMLStreamReader reader = factory.createXMLStreamReader(input);
                  }
              }
              """
          )
        );
    }

    @Test
    void factoryExternalWithClassBlockInitialization() {
        //language=java
        rewriteRun(
          java(
            """
              import javax.xml.stream.XMLInputFactory;
              import javax.xml.stream.XMLStreamReader;
              import java.io.InputStream;
              public class MyXmlReader {
                  XMLInputFactory factory = XMLInputFactory.newInstance();

                  {
                      factory.setProperty(XMLInputFactory.SUPPORT_DTD, false);
                  }
                  public void parseXML(InputStream input) {
                      XMLStreamReader reader = factory.createXMLStreamReader(input);
                  }
              }
              """,
            """
              import javax.xml.stream.XMLInputFactory;
              import javax.xml.stream.XMLStreamReader;
              import java.io.InputStream;
              public class MyXmlReader {
                  XMLInputFactory factory = XMLInputFactory.newInstance();

                  {
                      factory.setProperty(XMLInputFactory.SUPPORT_DTD, false);
                      factory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
                  }
                  public void parseXML(InputStream input) {
                      XMLStreamReader reader = factory.createXMLStreamReader(input);
                  }
              }
              """
          )
        );
    }

    @Test
    void factoryIsNotVulnerableStringLiteral() {
        //language=java
        rewriteRun(
          java(
            """
              import javax.xml.stream.XMLInputFactory;
              import javax.xml.stream.XMLStreamReader;
              import java.io.InputStream;
              public class MyXmlReader {
                  public void parseXML(InputStream input) {
                      XMLInputFactory f = XMLInputFactory.newInstance();
                      f.setProperty("javax.xml.stream.isSupportingExternalEntities", false);
                      f.setProperty("javax.xml.stream.supportDTD", false);
                      XMLStreamReader reader = f.createXMLStreamReader(input);
                  }
              }
              """
          )
        );
    }

    @Test
    void factoryIsVulnerableStringLiteralDTD() {
        //language=java
        rewriteRun(
          java(
            """
              import javax.xml.stream.XMLInputFactory;
              import javax.xml.stream.XMLStreamReader;
              import java.io.InputStream;
              public class MyXmlReader {
                  public void parseXML(InputStream input) {
                      XMLInputFactory f = XMLInputFactory.newInstance();
                      f.setProperty("javax.xml.stream.supportDTD", false);
                      XMLStreamReader reader = f.createXMLStreamReader(input);
                  }
              }
              """,
            """
              import javax.xml.stream.XMLInputFactory;
              import javax.xml.stream.XMLStreamReader;
              import java.io.InputStream;
              public class MyXmlReader {
                  public void parseXML(InputStream input) {
                      XMLInputFactory f = XMLInputFactory.newInstance();
                      f.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
                      f.setProperty("javax.xml.stream.supportDTD", false);
                      XMLStreamReader reader = f.createXMLStreamReader(input);
                  }
              }
              """
          )
        );
    }

    @Test
    void factoryIsVulnerableStringLiteralExternal() {
        //language=java
        rewriteRun(
          java(
            """
              import javax.xml.stream.XMLInputFactory;
              import javax.xml.stream.XMLStreamReader;
              import java.io.InputStream;
              public class MyXmlReader {
                  public void parseXML(InputStream input) {
                      XMLInputFactory f = XMLInputFactory.newInstance();
                      f.setProperty("javax.xml.stream.isSupportingExternalEntities", false);
                      XMLStreamReader reader = f.createXMLStreamReader(input);
                  }
              }
              """,
            """
              import javax.xml.stream.XMLInputFactory;
              import javax.xml.stream.XMLStreamReader;
              import java.io.InputStream;
              public class MyXmlReader {
                  public void parseXML(InputStream input) {
                      XMLInputFactory f = XMLInputFactory.newInstance();
                      f.setProperty(XMLInputFactory.SUPPORT_DTD, false);
                      f.setProperty("javax.xml.stream.isSupportingExternalEntities", false);
                      XMLStreamReader reader = f.createXMLStreamReader(input);
                  }
              }
              """
          )
        );
    }

    @ParameterizedTest
    @ValueSource(strings = {
      "<!DOCTYPE note [<!ENTITY note SYSTEM \"http://example.com/note.dtd\">]>",
      "<!DOCTYPE note SYSTEM \"http://example.com/note.dtd\">",
    })
    void factoryIsVulnerableButXMLDocTypesPresent(String docType) {
        rewriteRun(
          xml(
            docType + """
              <note>
                <to>Tove</to>
                <from>Jani</from>
                <heading>Reminder</heading>
                <body>Don't forget me this weekend!</body>
              </note>
              """
          ),
          java(
            """
              import javax.xml.stream.XMLInputFactory;
              import javax.xml.stream.XMLStreamReader;
              import java.io.InputStream;
              public class MyXmlReader {
                  public void parseXML(InputStream input) {
                      XMLInputFactory f = XMLInputFactory.newInstance();
                      XMLStreamReader reader = f.createXMLStreamReader(input);
                  }
              }
              """,
            """
              import javax.xml.stream.XMLInputFactory;
              import javax.xml.stream.XMLStreamException;
              import javax.xml.stream.XMLStreamReader;
              import java.io.InputStream;
              import java.util.Collection;
              import java.util.Collections;
              
              public class MyXmlReader {
                  public void parseXML(InputStream input) {
                      XMLInputFactory f = XMLInputFactory.newInstance();
                      f.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
                      f.setProperty(XMLInputFactory.SUPPORT_DTD, true);
                      Collection<String> allowList = Collections.singleton(
                              "http://example.com/note.dtd"
                      );
                      f.setXMLResolver((publicID, systemID, baseURI, namespace) -> {
                          if (allowList.contains(systemID)) {
                              // returning null will cause the parser to resolve the entity
                              return null;
                          }
                          throw new XMLStreamException("Loading of DTD was blocked to prevent XXE: " + systemID);
                      });
                      XMLStreamReader reader = f.createXMLStreamReader(input);
                  }
              }
              """
          )
        );
    }

    @Test
    void factoryIsVulnerableButMultipleXMLDocTypesPresent() {
        rewriteRun(
          xml(
            """
              <!DOCTYPE note [
              <!ENTITY note SYSTEM "http://example.com/note.dtd">
              <!ENTITY another SYSTEM "http://example.com/another.dtd">
              ]>
              <note>
                <to>Tove</to>
                <from>Jani</from>
                <heading>Reminder</heading>
                <body>Don't forget me this weekend!</body>
              </note>
              """
          ),
          java(
            """
              import javax.xml.stream.XMLInputFactory;
              import javax.xml.stream.XMLStreamReader;
              import java.io.InputStream;
              public class MyXmlReader {
                  public void parseXML(InputStream input) {
                      XMLInputFactory f = XMLInputFactory.newInstance();
                      XMLStreamReader reader = f.createXMLStreamReader(input);
                  }
              }
              """,
            """
              import javax.xml.stream.XMLInputFactory;
              import javax.xml.stream.XMLStreamException;
              import javax.xml.stream.XMLStreamReader;
              import java.io.InputStream;
              import java.util.Arrays;
              import java.util.Collection;
              
              public class MyXmlReader {
                  public void parseXML(InputStream input) {
                      XMLInputFactory f = XMLInputFactory.newInstance();
                      f.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
                      f.setProperty(XMLInputFactory.SUPPORT_DTD, true);
                      Collection<String> allowList = Arrays.asList(
                              "http://example.com/another.dtd",
                              "http://example.com/note.dtd"
                      );
                      f.setXMLResolver((publicID, systemID, baseURI, namespace) -> {
                          if (allowList.contains(systemID)) {
                              // returning null will cause the parser to resolve the entity
                              return null;
                          }
                          throw new XMLStreamException("Loading of DTD was blocked to prevent XXE: " + systemID);
                      });
                      XMLStreamReader reader = f.createXMLStreamReader(input);
                  }
              }
              """
          )
        );
    }
    @Test
    void factoryIsVulnerableButWithInternalXMLDocTypesPresent() {
        rewriteRun(
          xml(
            """
              <?xml version="1.0"?>
              <!DOCTYPE person>
              <person>
                <name>
                  <first_name>Alan</first_name>
                  <last_name>Turing</last_name>
                </name>
                <profession>computer scientist</profession>
                <profession>mathematician</profession>
                <profession>cryptographer</profession>
              </person>
              """
          ),
          java(
            """
              import javax.xml.stream.XMLInputFactory;
              import javax.xml.stream.XMLStreamReader;
              import java.io.InputStream;
              public class MyXmlReader {
                  public void parseXML(InputStream input) {
                      XMLInputFactory f = XMLInputFactory.newInstance();
                      XMLStreamReader reader = f.createXMLStreamReader(input);
                  }
              }
              """,
            """
              import javax.xml.stream.XMLInputFactory;
              import javax.xml.stream.XMLStreamReader;
              import java.io.InputStream;
              public class MyXmlReader {
                  public void parseXML(InputStream input) {
                      XMLInputFactory f = XMLInputFactory.newInstance();
                      f.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
                      f.setProperty(XMLInputFactory.SUPPORT_DTD, false);
                      XMLStreamReader reader = f.createXMLStreamReader(input);
                  }
              }
              """
          )
        );
    }

    @Test
    void factoryIsVulnerableButWithInternalCheckstyleXMLDocTypesPresent() {
        rewriteRun(
          xml(
            """
              <!DOCTYPE module PUBLIC
                  "-//Checkstyle//DTD Checkstyle Configuration 1.2//EN"
                  "https://checkstyle.org/dtds/configuration_1_2.dtd">
              <module name="Checker">
                  <module name="DefaultComesLast"/>
              </module>
              """
          ),
          java(
            """
              import javax.xml.stream.XMLInputFactory;
              import javax.xml.stream.XMLStreamReader;
              import java.io.InputStream;
              public class MyXmlReader {
                  public void parseXML(InputStream input) {
                      XMLInputFactory f = XMLInputFactory.newInstance();
                      XMLStreamReader reader = f.createXMLStreamReader(input);
                  }
              }
              """,
            """
              import javax.xml.stream.XMLInputFactory;
              import javax.xml.stream.XMLStreamException;
              import javax.xml.stream.XMLStreamReader;
              import java.io.InputStream;
              import java.util.Collection;
              import java.util.Collections;
              
              public class MyXmlReader {
                  public void parseXML(InputStream input) {
                      XMLInputFactory f = XMLInputFactory.newInstance();
                      f.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
                      f.setProperty(XMLInputFactory.SUPPORT_DTD, true);
                      Collection<String> allowList = Collections.singleton(
                              "https://checkstyle.org/dtds/configuration_1_2.dtd"
                      );
                      f.setXMLResolver((publicID, systemID, baseURI, namespace) -> {
                          if (allowList.contains(systemID)) {
                              // returning null will cause the parser to resolve the entity
                              return null;
                          }
                          throw new XMLStreamException("Loading of DTD was blocked to prevent XXE: " + systemID);
                      });
                      XMLStreamReader reader = f.createXMLStreamReader(input);
                  }
              }
              """
          )
        );
    }

    @Test
    void internalSubsets() {
        rewriteRun(
          xml(
            """
              <!DOCTYPE GAME PUBLIC 
                   "PublicGameIdentifier"
                   "Game.dtd">
              <GAME>
                  <team1>SA</team1>
                  <team2>UK</team2>
                  <score>2-0</score>
              </GAME>
              """
          ),
          java(
            """
              import javax.xml.stream.XMLInputFactory;
              import javax.xml.stream.XMLStreamReader;
              import java.io.InputStream;
              public class MyXmlReader {
                  public void parseXML(InputStream input) {
                      XMLInputFactory f = XMLInputFactory.newInstance();
                      XMLStreamReader reader = f.createXMLStreamReader(input);
                  }
              }
              """,
            """
              import javax.xml.stream.XMLInputFactory;
              import javax.xml.stream.XMLStreamException;
              import javax.xml.stream.XMLStreamReader;
              import java.io.InputStream;
              import java.util.Collection;
              import java.util.Collections;
              
              public class MyXmlReader {
                  public void parseXML(InputStream input) {
                      XMLInputFactory f = XMLInputFactory.newInstance();
                      f.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
                      f.setProperty(XMLInputFactory.SUPPORT_DTD, true);
                      Collection<String> allowList = Collections.singleton(
                              "Game.dtd"
                      );
                      f.setXMLResolver((publicID, systemID, baseURI, namespace) -> {
                          if (allowList.contains(systemID)) {
                              // returning null will cause the parser to resolve the entity
                              return null;
                          }
                          throw new XMLStreamException("Loading of DTD was blocked to prevent XXE: " + systemID);
                      });
                      XMLStreamReader reader = f.createXMLStreamReader(input);
                  }
              }
              """
          )
        );
    }

    @Test
    void factoryIsNotVulnerableButAllowListPresent() {
        rewriteRun(
          xml(
            """
              <!DOCTYPE GAME PUBLIC "Game.dtd">
              <GAME>
                  <team1>SA</team1>
                  <team2>UK</team2>
                  <score>2-0</score>
              </GAME>
              """
          ),
          java(
            """
              import javax.xml.stream.XMLInputFactory;
              import javax.xml.stream.XMLStreamException;
              import javax.xml.stream.XMLStreamReader;
              import java.io.InputStream;
              import java.util.Collection;
              import java.util.Collections;
              
              public class MyXmlReader {
                  public void parseXML(InputStream input) throws XMLStreamException {
                      XMLInputFactory f = XMLInputFactory.newInstance();
                      f.setProperty(XMLInputFactory.SUPPORT_DTD, true);
                      Collection<String> allowList = Collections.singleton(
                              "Game.dtd"
                      );
                      f.setXMLResolver((publicID, systemID, baseURI, namespace) -> {
                          if (allowList.contains(systemID)){
                              // returning null will cause the parser to resolve the entity
                              return null;
                          }
                          throw new XMLStreamException("Loading of DTD was blocked to prevent XXE: " + systemID);
                      });
                      XMLStreamReader reader = f.createXMLStreamReader(input);
                  }
              }
              """,
            """
              import javax.xml.stream.XMLInputFactory;
              import javax.xml.stream.XMLStreamException;
              import javax.xml.stream.XMLStreamReader;
              import java.io.InputStream;
              import java.util.Collection;
              import java.util.Collections;
              
              public class MyXmlReader {
                  public void parseXML(InputStream input) throws XMLStreamException {
                      XMLInputFactory f = XMLInputFactory.newInstance();
                      f.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
                      f.setProperty(XMLInputFactory.SUPPORT_DTD, true);
                      Collection<String> allowList = Collections.singleton(
                              "Game.dtd"
                      );
                      f.setXMLResolver((publicID, systemID, baseURI, namespace) -> {
                          if (allowList.contains(systemID)){
                              // returning null will cause the parser to resolve the entity
                              return null;
                          }
                          throw new XMLStreamException("Loading of DTD was blocked to prevent XXE: " + systemID);
                      });
                      XMLStreamReader reader = f.createXMLStreamReader(input);
                  }
              }
              """
          )
        );
    }

    @Test
    void factoryIsVulnerableWithPublicAndSystemIdPresent() {
        rewriteRun(
          xml(
            """
              <!DOCTYPE xml [
                  <!ENTITY open-hatch-system
                    SYSTEM "http://www.textuality.com/boilerplate/OpenHatch.xml">
                  <!ENTITY open-hatch-public
                    PUBLIC "-//Textuality//TEXT Standard open-hatch boilerplate//EN"
                    "http://www.texty.com/boilerplate/OpenHatch.xml">
                  <!ENTITY hatch-pic
                    SYSTEM "../grafix/OpenHatch.gif"
                    NDATA gif>
              ]>
              <root>
                <!-- Your XML content here -->
              </root>
              """
          ),
          java(
            """
              import javax.xml.stream.XMLInputFactory;
              import javax.xml.stream.XMLStreamReader;
              import java.io.InputStream;
              public class MyXmlReader {
                  public void parseXML(InputStream input) {
                      XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();
                      XMLStreamReader reader = xmlInputFactory.createXMLStreamReader(input);
                  }
              }
              """,
            """
              import javax.xml.stream.XMLInputFactory;
              import javax.xml.stream.XMLStreamException;
              import javax.xml.stream.XMLStreamReader;
              import java.io.InputStream;
              import java.util.Arrays;
              import java.util.Collection;
              
              public class MyXmlReader {
                  public void parseXML(InputStream input) {
                      XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();
                      xmlInputFactory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
                      xmlInputFactory.setProperty(XMLInputFactory.SUPPORT_DTD, true);
                      Collection<String> allowList = Arrays.asList(
                              "../grafix/OpenHatch.gif",
                              "http://www.textuality.com/boilerplate/OpenHatch.xml",
                              "http://www.texty.com/boilerplate/OpenHatch.xml"
                      );
                      xmlInputFactory.setXMLResolver((publicID, systemID, baseURI, namespace) -> {
                          if (allowList.contains(systemID)) {
                              // returning null will cause the parser to resolve the entity
                              return null;
                          }
                          throw new XMLStreamException("Loading of DTD was blocked to prevent XXE: " + systemID);
                      });
                      XMLStreamReader reader = xmlInputFactory.createXMLStreamReader(input);
                  }
              }
              """
          )
        );
    }

    @Test
    void factoryHasSystemDoctypeEntities() {
        rewriteRun(
                xml(
                        """
                          <?xml version="1.0" encoding="UTF-8"?>
                          <!DOCTYPE root SYSTEM "example.dtd">
                          <root>
                            <element1>Value 1</element1>
                            <element2>Value 2</element2>
                          </root>
                          """
                ),
                java(
                        """
                          import javax.xml.stream.XMLInputFactory;
                          import javax.xml.stream.XMLStreamReader;
                          import java.io.InputStream;
                          public class MyXmlReader {
                              public void parseXML(InputStream input) {
                                  XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();
                                  XMLStreamReader reader = xmlInputFactory.createXMLStreamReader(input);
                              }
                          }
                          """,
                        """
                          import javax.xml.stream.XMLInputFactory;
                          import javax.xml.stream.XMLStreamException;
                          import javax.xml.stream.XMLStreamReader;
                          import java.io.InputStream;
                          import java.util.Collection;
                          import java.util.Collections;
                          
                          public class MyXmlReader {
                              public void parseXML(InputStream input) {
                                  XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();
                                  xmlInputFactory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
                                  xmlInputFactory.setProperty(XMLInputFactory.SUPPORT_DTD, true);
                                  Collection<String> allowList = Collections.singleton(
                                          "example.dtd"
                                  );
                                  xmlInputFactory.setXMLResolver((publicID, systemID, baseURI, namespace) -> {
                                      if (allowList.contains(systemID)) {
                                          // returning null will cause the parser to resolve the entity
                                          return null;
                                      }
                                      throw new XMLStreamException("Loading of DTD was blocked to prevent XXE: " + systemID);
                                  });
                                  XMLStreamReader reader = xmlInputFactory.createXMLStreamReader(input);
                              }
                          }
                          """
                )
        );
    }


}
